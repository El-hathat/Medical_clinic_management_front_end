{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass HttpService {\n  constructor(http) {\n    this.http = http;\n    this.url = 'http://localhost:8082/api/v1/';\n    this.header = new HttpHeaders({\n      \"No-Auth\": \"true\"\n    });\n  }\n  setst(st) {\n    this.st = st;\n  }\n  getst() {\n    return this.st;\n  }\n  setpt(pt) {\n    this.pt = pt;\n  }\n  getpt() {\n    return this.pt;\n  }\n  setMd(mid) {\n    this.md = mid;\n  }\n  getMd() {\n    return this.md;\n  }\n  getPatients() {\n    return this.http.get(this.url + 'patients');\n  }\n  addPatient(patient) {\n    return this.http.post(this.url + 'addPatient', patient);\n  }\n  getcur() {\n    return this.http.get(this.url + 'currentUser');\n  }\n  fetchAll() {\n    return this.http.get(this.url + 'medcins');\n  }\n  addMedecin(medecin) {\n    return this.http.post(this.url + 'registrer', medecin);\n  }\n  getAllPatientsBy() {\n    return this.http.get(this.url + 'getPatientsByMedcin/' + this.md);\n  }\n  //Login\n  getToken(data) {\n    return this.http.post(this.url + 'auth', data);\n  }\n  login(tkn) {\n    //const token=localStorage.getItem('token');\n    //console.log('hada howa : '+tkn);\n    const header = new HttpHeaders({\n      'Authorization': 'Bearer' + tkn\n    });\n    this.http.post(this.url + 'currentUser', this.header);\n    return this.http.get(this.url + 'getMed');\n  }\n  getCurrentUser() {\n    console.log(this.http.get(this.url + 'getMed'));\n    return this.http.get(this.url + 'getMed');\n  }\n}\nHttpService.ɵfac = function HttpService_Factory(t) {\n  return new (t || HttpService)(i0.ɵɵinject(i1.HttpClient));\n};\nHttpService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HttpService,\n  factory: HttpService.ɵfac,\n  providedIn: 'root'\n});\nexport { HttpService };","map":{"version":3,"names":["HttpHeaders","HttpService","constructor","http","url","header","setst","st","getst","setpt","pt","getpt","setMd","mid","md","getMd","getPatients","get","addPatient","patient","post","getcur","fetchAll","addMedecin","medecin","getAllPatientsBy","getToken","data","login","tkn","getCurrentUser","console","log","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\sony\\Desktop\\PFE\\front-end\\CAB\\src\\app\\Services\\http.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Medecin } from '../Models/Medecin';\nimport { Observable } from 'rxjs';\nimport { Token } from '@angular/compiler';\nimport { Patient } from '../Models/Patient';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpService {\nurl: String = 'http://localhost:8082/api/v1/';\npublic md : Medecin;\npublic pt:Patient;\npublic st:String;\nheader=new HttpHeaders({\"No-Auth\":\"true\"});\n  constructor(private http:HttpClient) { \n    \n  }\n  setst(st:String):void{\n    this.st=st;\n    }\n    getst():String{\n     return this.st;\n      }\n  setpt(pt:Patient):void{\n    this.pt=pt;\n    }\n    getpt():Patient{\n     return this.pt;\n      }\n      setMd(mid:Medecin):void{\n        this.md=mid;\n        }\n        getMd():Medecin{\n         return this.md;\n          }\n\n          \n  \n\n      public getPatients():Observable<Patient[]>{\n        return this.http.get<Patient[]>(this.url+ 'patients');\n      }\n      public addPatient(patient: Patient){\n        return this.http.post<Patient>(this.url+'addPatient', patient);\n      }\n\n  public getcur():Observable<Medecin[]>{\n    return this.http.get<Medecin[]>(this.url+ 'currentUser');\n  }\n  public fetchAll():Observable<Medecin[]>{\n    return this.http.get<Medecin[]>(this.url+ 'medcins');\n  }\n  public addMedecin(medecin: Medecin){\n    return this.http.post<Medecin>(this.url+'registrer', medecin);\n  }\n\n  public getAllPatientsBy():Observable<Patient[]>{\n    return this.http.get<Patient[]>(this.url+ 'getPatientsByMedcin/'+this.md);\n  }\n  //Login\n  getToken(data):Observable<any>{\n   return this.http.post(this.url+'auth',data);\n    \n  }\n\n  login(tkn:String):Observable<Medecin>{\n    \n    \n    //const token=localStorage.getItem('token');\n    //console.log('hada howa : '+tkn);\n    const header=new HttpHeaders({\n      'Authorization':'Bearer'+tkn\n\n    });\n   this.http.post<Medecin>(this.url+'currentUser',this.header);\nreturn this.http.get<Medecin>(this.url+'getMed');\n  }\n\n\n  public getCurrentUser():Observable<Medecin>{\n    console.log(this.http.get<Medecin>(this.url+'getMed'));\n    return this.http.get<Medecin>(this.url+'getMed');\n  }\n}\n"],"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAS9D,MAGaC,WAAW;EAMtBC,YAAoBC,IAAe;IAAf,KAAAA,IAAI,GAAJA,IAAI;IAL1B,KAAAC,GAAG,GAAW,+BAA+B;IAI7C,KAAAC,MAAM,GAAC,IAAIL,WAAW,CAAC;MAAC,SAAS,EAAC;IAAM,CAAC,CAAC;EAGxC;EACAM,KAAKA,CAACC,EAAS;IACb,IAAI,CAACA,EAAE,GAACA,EAAE;EACV;EACAC,KAAKA,CAAA;IACJ,OAAO,IAAI,CAACD,EAAE;EACb;EACJE,KAAKA,CAACC,EAAU;IACd,IAAI,CAACA,EAAE,GAACA,EAAE;EACV;EACAC,KAAKA,CAAA;IACJ,OAAO,IAAI,CAACD,EAAE;EACb;EACAE,KAAKA,CAACC,GAAW;IACf,IAAI,CAACC,EAAE,GAACD,GAAG;EACX;EACAE,KAAKA,CAAA;IACJ,OAAO,IAAI,CAACD,EAAE;EACb;EAKGE,WAAWA,CAAA;IAChB,OAAO,IAAI,CAACb,IAAI,CAACc,GAAG,CAAY,IAAI,CAACb,GAAG,GAAE,UAAU,CAAC;EACvD;EACOc,UAAUA,CAACC,OAAgB;IAChC,OAAO,IAAI,CAAChB,IAAI,CAACiB,IAAI,CAAU,IAAI,CAAChB,GAAG,GAAC,YAAY,EAAEe,OAAO,CAAC;EAChE;EAEGE,MAAMA,CAAA;IACX,OAAO,IAAI,CAAClB,IAAI,CAACc,GAAG,CAAY,IAAI,CAACb,GAAG,GAAE,aAAa,CAAC;EAC1D;EACOkB,QAAQA,CAAA;IACb,OAAO,IAAI,CAACnB,IAAI,CAACc,GAAG,CAAY,IAAI,CAACb,GAAG,GAAE,SAAS,CAAC;EACtD;EACOmB,UAAUA,CAACC,OAAgB;IAChC,OAAO,IAAI,CAACrB,IAAI,CAACiB,IAAI,CAAU,IAAI,CAAChB,GAAG,GAAC,WAAW,EAAEoB,OAAO,CAAC;EAC/D;EAEOC,gBAAgBA,CAAA;IACrB,OAAO,IAAI,CAACtB,IAAI,CAACc,GAAG,CAAY,IAAI,CAACb,GAAG,GAAE,sBAAsB,GAAC,IAAI,CAACU,EAAE,CAAC;EAC3E;EACA;EACAY,QAAQA,CAACC,IAAI;IACZ,OAAO,IAAI,CAACxB,IAAI,CAACiB,IAAI,CAAC,IAAI,CAAChB,GAAG,GAAC,MAAM,EAACuB,IAAI,CAAC;EAE5C;EAEAC,KAAKA,CAACC,GAAU;IAGd;IACA;IACA,MAAMxB,MAAM,GAAC,IAAIL,WAAW,CAAC;MAC3B,eAAe,EAAC,QAAQ,GAAC6B;KAE1B,CAAC;IACH,IAAI,CAAC1B,IAAI,CAACiB,IAAI,CAAU,IAAI,CAAChB,GAAG,GAAC,aAAa,EAAC,IAAI,CAACC,MAAM,CAAC;IAC9D,OAAO,IAAI,CAACF,IAAI,CAACc,GAAG,CAAU,IAAI,CAACb,GAAG,GAAC,QAAQ,CAAC;EAC9C;EAGO0B,cAAcA,CAAA;IACnBC,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC7B,IAAI,CAACc,GAAG,CAAU,IAAI,CAACb,GAAG,GAAC,QAAQ,CAAC,CAAC;IACtD,OAAO,IAAI,CAACD,IAAI,CAACc,GAAG,CAAU,IAAI,CAACb,GAAG,GAAC,QAAQ,CAAC;EAClD;;AA1EWH,WAAW,C;mBAAXA,WAAW,EAAAgC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAXnC,WAAW,C;SAAXA,WAAW;EAAAoC,OAAA,EAAXpC,WAAW,CAAAqC,IAAA;EAAAC,UAAA,EAFV;AAAM;SAEPtC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}